generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Enums
enum UserRole {
  ADMIN
  USER
}

enum PostStatus {
  DRAFT
  PUBLISHED
  SCHEDULED
}

enum FeedbackType {
  LIKE
  DISLIKE
}

// Your models
model User {
  id                      String                  @id @default(cuid())
  name                    String?
  email                   String?                 @unique
  tempEmail               String?
  emailVerified           DateTime?
  image                   String?
  password                String?
  role                    UserRole                @default(USER)
  createdAt               DateTime                @default(now())
  updatedAt               DateTime                @updatedAt
  accounts                Account[]
  verificationTokens      VerificationToken[]
  passwordResetTokens     PasswordResetToken[]
  twoFactorTokens         TwoFactorToken[]
  twoFactorConfirms       TwoFactorConfirmation[]
  posts                   Post[]                  @relation("UserPosts")
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id            String   @id @default(uuid())
  token         String   @unique
  userId        String
  isUpdateEmail Boolean  @default(false)
  createdAt     DateTime @default(now())
  expiresAt     DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@unique([userId, token])
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  email     String
  token     String    @unique
  expires   DateTime
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([email, token])
}

model TwoFactorToken {
  id        String    @id @default(cuid())
  email     String
  token     String    @unique
  expires   DateTime
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id      String  @id @default(cuid())
  userId  String
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Post {
  id          String         @id @default(cuid())
  title       String
  excerpt     String?        @db.Text
  content     Json?
  status      PostStatus     @default(DRAFT)
  coverImage  String?
  authorId    String
  author      User?          @relation(fields: [authorId], references: [id], name: "UserPosts")
  tags        Tag[]
  views       Int            @default(0)
  slug        String?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  publishedAt DateTime?
  scheduledAt DateTime?
  feedback    PostFeedback[]

  @@index([authorId])
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  posts Post[]
}

model Project {
  id           String   @id @default(uuid())
  name         String
  description  String
  visibility   String   @default("private")
  isPaid       Boolean  @default(false)
  price        Float?
  createdById  String
  storagePath  String?
  files        Json?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([createdById])
}

model PostFeedback {
  id        String        @id @default(cuid())
  postId    String
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId    String
  type      FeedbackType
  createdAt DateTime      @default(now())

  @@unique([postId, userId])
  @@index([postId])
  @@index([userId])
}
